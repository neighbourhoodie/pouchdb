import { clone } from 'pouchdb-utils';

// this method removes a leaf from a rev tree, independent of its status.
// e.g., by removing an available leaf, it could leave its predecessor as
// a missing leaf and corrupting the tree.
function removeLeafFromRevTree(tree, leafRev) {
  const _tree = clone(tree);
  const toVisit = _tree.slice();

  // we will store branchings (node.branches > 1) as a LIFO stack
  const branchings = [];

  let previousNode;
  let node;
  while ((node = toVisit.pop())) {
    const pos = node.pos;
    const [id, , branches] = node.ids;
    const isLeaf = branches.length === 0;
    const hash = `${pos}-${id}`;

    if (isLeaf && hash === leafRev) {
      previousNode.ids[2] = previousNode.ids[2].filter(function (branchNode) {
        return branchNode[0] !== id;
      });
      return _tree;
    }

    if (branches.length) {
      if (branches.length > 1) {
        branchings.push(node);
      }

      for (let i = 0, len = branches.length; i < len; i++) {
        toVisit.push({pos: pos + 1, ids: branches[i]});
      }
    }

    if (branches.length === 0 && branchings.length > 0) {
      previousNode = branchings.pop();
    }  else {
      previousNode = node;
    }
  }
  return _tree;
}

export default removeLeafFromRevTree;
